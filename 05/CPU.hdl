// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a=instruction,b=ALUoutput,sel=instruction[15],out=AregisterIN);
    Not(in=instruction[15],out=isAinstruction);
    And(a=instruction[15],b=loadAregister,out=CinstructionAndLoadA);
    Or(a=isAinstruction,b=CinstructionAndLoadA,out=AloadBit);
    ARegister(in=AregisterIN,load=AloadBit,out=AregisterOUT,out[0..14]=addressM);
    DRegister(in=ALUoutput,load=loadDregister,out=ALUinputD);
    Mux16(a=AregisterOUT,b=inM,sel=instruction[12],out=ALUinputAorM);
    ALU(
        x=ALUinputD,
        y=ALUinputAorM,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        zr=ALUoutputZero,
        ng=ALUoutputNeg,
        out=ALUoutput,
        out=outM
    );
    And(a=instruction[15],b=instruction[5],out=loadAregister);
    And(a=instruction[15],b=instruction[4],out=loadDregister);
    And(a=instruction[15],b=instruction[3],out=writeM);
    PC(in=AregisterOUT,load=shouldJumpFINAL,inc=true,reset=reset,out[0..14]=pc);
    DMux8Way(
        in=true,
        sel=instruction[0..2],
        a=NOJMP,
        b=JGT,
        c=JEQ,
        d=JGE,
        e=JLT,
        f=JNE,
        g=JLE,
        h=JMPfinal
    );
    Not(in=ALUoutputZero,out=notZero);
    Not(in=ALUoutputNeg,out=notNeg);
    And(a=notZero,b=notNeg,out=greaterThan);
    And(a=JGT,b=greaterThan,out=JGTfinal);
    And(a=JEQ,b=ALUoutputZero,out=JEQfinal);
    Or(a=ALUoutputZero,b=greaterThan,out=JGEtest);
    And(a=JGE,b=JGEtest,out=JGEfinal);
    And(a=JLT,b=ALUoutputNeg,out=JLTfinal);
    And(a=JNE,b=notZero,out=JNEfinal);
    Or(a=ALUoutputNeg,b=ALUoutputZero,out=JLEtest);
    And(a=JLE,b=JLEtest,out=JLEfinal);
    Or8Way(
        in[0]=false,
        in[1]=JGTfinal,
        in[2]=JEQfinal,
        in[3]=JGEfinal,
        in[4]=JLTfinal,
        in[5]=JNEfinal,
        in[6]=JLEfinal,
        in[7]=JMPfinal,
        out=shouldJump
    );
    And(a=shouldJump,b=instruction[15],out=shouldJumpFINAL);
}
