// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array chars;
    field int cur_length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength > 0) {
            let chars = Array.new(maxLength);
        } else {
            let chars = 0;
        }
        let cur_length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (chars > 0) {
            do Memory.deAlloc(chars);
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return cur_length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let chars[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let chars[cur_length] = c;
        let cur_length = cur_length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let cur_length = cur_length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int value;
        var int idx;
        var int cur_digit;
        var boolean is_negative;
        let value = 0;
        let idx = 0;
        if (chars[0] = 45) {
            let is_negative = true;
            let idx = 1;
        } else {
            let is_negative = false;
        }
        while (idx < cur_length) {
            let cur_digit = chars[idx] - 48;
            let value = value * 10 + cur_digit;
            let idx = idx + 1;
        }
        if (is_negative) {
            let value = -value;
        }
        return value;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var char last_digit;
        var boolean is_negative;
        if (val < 0) {
            let is_negative = true;
            let val = Math.abs(val);
        } else {
            let is_negative = false;
        }
        let last_digit = (val - (val / 10 * 10)) + 48;
        if (val < 10) {
            let cur_length = 0;
            if (is_negative) {
                do appendChar(45);
            }
            do appendChar(last_digit);
        } else {
            do setInt(val / 10);
            do appendChar(last_digit);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
